def SPA_AUDIO_MAX_CHANNELS: uint = 64;
def SPA_AUDIO_FLAG_NONE: u32 = 0;
def SPA_AUDIO_FLAG_UNPOSITIONED: u32 = 1 << 0;
export type spa_audio_format = enum {
	SPA_AUDIO_FORMAT_UNKNOWN,
	SPA_AUDIO_FORMAT_ENCODED,
	SPA_AUDIO_FORMAT_START_Interleaved = 0x100,
	SPA_AUDIO_FORMAT_S8,
	SPA_AUDIO_FORMAT_U8,
	SPA_AUDIO_FORMAT_S16_LE,
	SPA_AUDIO_FORMAT_S16_BE,
	SPA_AUDIO_FORMAT_U16_LE,
	SPA_AUDIO_FORMAT_U16_BE,
	SPA_AUDIO_FORMAT_S24_32_LE,
	SPA_AUDIO_FORMAT_S24_32_BE,
	SPA_AUDIO_FORMAT_U24_32_LE,
	SPA_AUDIO_FORMAT_U24_32_BE,
	SPA_AUDIO_FORMAT_S32_LE,
	SPA_AUDIO_FORMAT_S32_BE,
	SPA_AUDIO_FORMAT_U32_LE,
	SPA_AUDIO_FORMAT_U32_BE,
	SPA_AUDIO_FORMAT_S24_LE,
	SPA_AUDIO_FORMAT_S24_BE,
	SPA_AUDIO_FORMAT_U24_LE,
	SPA_AUDIO_FORMAT_U24_BE,
	SPA_AUDIO_FORMAT_S20_LE,
	SPA_AUDIO_FORMAT_S20_BE,
	SPA_AUDIO_FORMAT_U20_LE,
	SPA_AUDIO_FORMAT_U20_BE,
	SPA_AUDIO_FORMAT_S18_LE,
	SPA_AUDIO_FORMAT_S18_BE,
	SPA_AUDIO_FORMAT_U18_LE,
	SPA_AUDIO_FORMAT_U18_BE,
	SPA_AUDIO_FORMAT_F32_LE,
	SPA_AUDIO_FORMAT_F32_BE,
	SPA_AUDIO_FORMAT_F64_LE,
	SPA_AUDIO_FORMAT_F64_BE,
	SPA_AUDIO_FORMAT_ULAW,
	SPA_AUDIO_FORMAT_ALAW,
	SPA_AUDIO_FORMAT_START_Planar = 0x200,
	SPA_AUDIO_FORMAT_U8P,
	SPA_AUDIO_FORMAT_S16P,
	SPA_AUDIO_FORMAT_S24_32P,
	SPA_AUDIO_FORMAT_S32P,
	SPA_AUDIO_FORMAT_S24P,
	SPA_AUDIO_FORMAT_F32P,
	SPA_AUDIO_FORMAT_F64P,
	SPA_AUDIO_FORMAT_S8P,
	SPA_AUDIO_FORMAT_START_Other = 0x400,
	SPA_AUDIO_FORMAT_DSP_S32 = SPA_AUDIO_FORMAT_S24_32P,
	SPA_AUDIO_FORMAT_DSP_F32 = SPA_AUDIO_FORMAT_F32P,
	SPA_AUDIO_FORMAT_DSP_F64 = SPA_AUDIO_FORMAT_F64P,
	// Fields from here on are specific to little endian
	// TODO: big endian
	SPA_AUDIO_FORMAT_S16 = SPA_AUDIO_FORMAT_S16_LE,
	SPA_AUDIO_FORMAT_U16 = SPA_AUDIO_FORMAT_U16_LE,
	SPA_AUDIO_FORMAT_S24_32 = SPA_AUDIO_FORMAT_S24_32_LE,
	SPA_AUDIO_FORMAT_U24_32 = SPA_AUDIO_FORMAT_U24_32_LE,
	SPA_AUDIO_FORMAT_S32 = SPA_AUDIO_FORMAT_S32_LE,
	SPA_AUDIO_FORMAT_U32 = SPA_AUDIO_FORMAT_U32_LE,
	SPA_AUDIO_FORMAT_S24 = SPA_AUDIO_FORMAT_S24_LE,
	SPA_AUDIO_FORMAT_U24 = SPA_AUDIO_FORMAT_U24_LE,
	SPA_AUDIO_FORMAT_S20 = SPA_AUDIO_FORMAT_S20_LE,
	SPA_AUDIO_FORMAT_U20 = SPA_AUDIO_FORMAT_U20_LE,
	SPA_AUDIO_FORMAT_S18 = SPA_AUDIO_FORMAT_S18_LE,
	SPA_AUDIO_FORMAT_U18 = SPA_AUDIO_FORMAT_U18_LE,
	SPA_AUDIO_FORMAT_F32 = SPA_AUDIO_FORMAT_F32_LE,
	SPA_AUDIO_FORMAT_F64 = SPA_AUDIO_FORMAT_F64_LE,
	SPA_AUDIO_FORMAT_S16_OE = SPA_AUDIO_FORMAT_S16_BE,
	SPA_AUDIO_FORMAT_U16_OE = SPA_AUDIO_FORMAT_U16_BE,
	SPA_AUDIO_FORMAT_S24_32_OE = SPA_AUDIO_FORMAT_S24_32_BE,
	SPA_AUDIO_FORMAT_U24_32_OE = SPA_AUDIO_FORMAT_U24_32_BE,
	SPA_AUDIO_FORMAT_S32_OE = SPA_AUDIO_FORMAT_S32_BE,
	SPA_AUDIO_FORMAT_U32_OE = SPA_AUDIO_FORMAT_U32_BE,
	SPA_AUDIO_FORMAT_S24_OE = SPA_AUDIO_FORMAT_S24_BE,
	SPA_AUDIO_FORMAT_U24_OE = SPA_AUDIO_FORMAT_U24_BE,
	SPA_AUDIO_FORMAT_S20_OE = SPA_AUDIO_FORMAT_S20_BE,
	SPA_AUDIO_FORMAT_U20_OE = SPA_AUDIO_FORMAT_U20_BE,
	SPA_AUDIO_FORMAT_S18_OE = SPA_AUDIO_FORMAT_S18_BE,
	SPA_AUDIO_FORMAT_U18_OE = SPA_AUDIO_FORMAT_U18_BE,
	SPA_AUDIO_FORMAT_F32_OE = SPA_AUDIO_FORMAT_F32_BE,
	SPA_AUDIO_FORMAT_F64_OE = SPA_AUDIO_FORMAT_F64_BE,
};
export type spa_audio_info_raw = struct {
	format: spa_audio_format,
	flags: u32,
	rate: u32,
	channels: u32,
	position: [SPA_AUDIO_MAX_CHANNELS]u32,
};

export fn spa_format_audio_raw_build(
	builder: *spa_pod_builder,
	id: u32,
	info: *spa_audio_info_raw,
) nullable *spa_pod = {
	let f: spa_pod_frame = spa_pod_frame { ... };
	spa_pod_builder_push_object(builder, &f,
		spa_type::SPA_TYPE_OBJECT_Format, id);
	spa_pod_builder_add(builder,
		spa_format::SPA_FORMAT_mediaType,
		strtoc("I\0"), spa_media_type::SPA_MEDIA_TYPE_audio,
		spa_format::SPA_FORMAT_mediaSubtype,
		strtoc("I\0"), spa_media_subtype::SPA_MEDIA_SUBTYPE_raw,
		0);
	if (info.format != spa_audio_format::SPA_AUDIO_FORMAT_UNKNOWN) {
		spa_pod_builder_add(builder,
			spa_format::SPA_FORMAT_AUDIO_format,
			strtoc("I\0"), info.format, 0);
	};
	if (info.rate != 0) {
		spa_pod_builder_add(builder,
			spa_format::SPA_FORMAT_AUDIO_rate,
			strtoc("i\0"), info.rate, 0);
	};
	if (info.channels != 0) {
		spa_pod_builder_add(builder,
			spa_format::SPA_FORMAT_AUDIO_channels,
			strtoc("i\0"), info.channels, 0);
		if (
			info.flags & SPA_AUDIO_FLAG_UNPOSITIONED ==
				SPA_AUDIO_FLAG_UNPOSITIONED
		) {
			spa_pod_builder_add(builder,
				spa_format::SPA_FORMAT_AUDIO_position,
				strtoc("a\0"),
				size(u32): u32,
				spa_type::SPA_TYPE_Id,
				info.channels,
				info.position,
				0);
		};
	};
	return spa_pod_builder_pop(builder, &f): nullable *spa_pod;
};
